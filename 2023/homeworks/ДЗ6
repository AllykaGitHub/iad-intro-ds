{"cells":[{"cell_type":"markdown","metadata":{"id":"xrvOD02o3HvH"},"source":["# Домашнее задание 6: классификация текстов"]},{"cell_type":"markdown","metadata":{"id":"sxwj_Iie3HvJ"},"source":["В этом домашнем задании вам предстоит построить классификатор текстов!\n","\n","Данные мы будем использовать из Kaggle соревнования: https://www.kaggle.com/competitions/nlp-getting-started/data \n","\n","\n","Оттуда надо скачать файл train.csv. На обучающую и тестовую выборки его поделим кодом ниже, менять его не надо!"]},{"cell_type":"markdown","metadata":{"id":"qQVgqLg93HvJ"},"source":["Мы будем работать с датасетом постов из твиттера. Нам предстоит решать задачу бинарной классификации - определять содержатся ли в твитте информация о настоящей катастрофе/инциденте или нет."]},{"cell_type":"code","execution_count":6,"metadata":{"id":"TcjEYh7R3HvK","executionInfo":{"status":"ok","timestamp":1683832129609,"user_tz":-180,"elapsed":251,"user":{"displayName":"Дмитрий Петин","userId":"09445160174042392657"}}},"outputs":[],"source":["import numpy as np\n","import pandas as pd\n","from typing import  List\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","from string import punctuation"]},{"cell_type":"code","execution_count":7,"metadata":{"id":"mjwffGiB3HvK","executionInfo":{"status":"ok","timestamp":1683832129860,"user_tz":-180,"elapsed":7,"user":{"displayName":"Дмитрий Петин","userId":"09445160174042392657"}}},"outputs":[],"source":["data = pd.read_csv('/content/train.csv')"]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SkjOV_aRNtfU","executionInfo":{"status":"ok","timestamp":1683832149261,"user_tz":-180,"elapsed":19406,"user":{"displayName":"Дмитрий Петин","userId":"09445160174042392657"}},"outputId":"41724a3a-9ef2-4ff4-ad30-5814859973db"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","execution_count":9,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":248},"id":"v0uUoFTN3HvK","outputId":"9a370314-4b7e-4c12-aba7-755efdd0afd6","executionInfo":{"status":"ok","timestamp":1683832149262,"user_tz":-180,"elapsed":13,"user":{"displayName":"Дмитрий Петин","userId":"09445160174042392657"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["   id keyword location                                               text  \\\n","0   1     NaN      NaN  Our Deeds are the Reason of this #earthquake M...   \n","1   4     NaN      NaN             Forest fire near La Ronge Sask. Canada   \n","2   5     NaN      NaN  All residents asked to 'shelter in place' are ...   \n","3   6     NaN      NaN  13,000 people receive #wildfires evacuation or...   \n","4   7     NaN      NaN  Just got sent this photo from Ruby #Alaska as ...   \n","\n","   target  \n","0       1  \n","1       1  \n","2       1  \n","3       1  \n","4       1  "],"text/html":["\n","  <div id=\"df-f7e57b82-0404-43e1-9e28-03be4a00ccbb\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>id</th>\n","      <th>keyword</th>\n","      <th>location</th>\n","      <th>text</th>\n","      <th>target</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>Our Deeds are the Reason of this #earthquake M...</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>4</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>Forest fire near La Ronge Sask. Canada</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>5</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>All residents asked to 'shelter in place' are ...</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>6</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>13,000 people receive #wildfires evacuation or...</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>7</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>Just got sent this photo from Ruby #Alaska as ...</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f7e57b82-0404-43e1-9e28-03be4a00ccbb')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-f7e57b82-0404-43e1-9e28-03be4a00ccbb button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-f7e57b82-0404-43e1-9e28-03be4a00ccbb');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":9}],"source":["data.head()"]},{"cell_type":"code","execution_count":10,"metadata":{"id":"f49NdWY23HvL","executionInfo":{"status":"ok","timestamp":1683832149654,"user_tz":-180,"elapsed":400,"user":{"displayName":"Дмитрий Петин","userId":"09445160174042392657"}}},"outputs":[],"source":["from sklearn.model_selection import train_test_split\n","\n","train, test = train_test_split(data, test_size=0.3, random_state=42)"]},{"cell_type":"markdown","metadata":{"id":"YlLemInT3HvL"},"source":["## Задание 1 (0.5 балла)\n","\n","Выведете на экран информацию о пропусках в данных. Если пропуски присутствуют заполните их пустой строкой."]},{"cell_type":"code","source":["print(data.isnull().sum())\n","\n","data.fillna('', inplace=True)\n","\n","print(data)\n"],"metadata":{"id":"96aJxmkV4105","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1683832149655,"user_tz":-180,"elapsed":12,"user":{"displayName":"Дмитрий Петин","userId":"09445160174042392657"}},"outputId":"a434bed1-e8cb-4ec7-a203-6e52187ebeb2"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["id             0\n","keyword       61\n","location    2533\n","text           0\n","target         0\n","dtype: int64\n","         id keyword location  \\\n","0         1                    \n","1         4                    \n","2         5                    \n","3         6                    \n","4         7                    \n","...     ...     ...      ...   \n","7608  10869                    \n","7609  10870                    \n","7610  10871                    \n","7611  10872                    \n","7612  10873                    \n","\n","                                                   text  target  \n","0     Our Deeds are the Reason of this #earthquake M...       1  \n","1                Forest fire near La Ronge Sask. Canada       1  \n","2     All residents asked to 'shelter in place' are ...       1  \n","3     13,000 people receive #wildfires evacuation or...       1  \n","4     Just got sent this photo from Ruby #Alaska as ...       1  \n","...                                                 ...     ...  \n","7608  Two giant cranes holding a bridge collapse int...       1  \n","7609  @aria_ahrary @TheTawniest The out of control w...       1  \n","7610  M1.94 [01:04 UTC]?5km S of Volcano Hawaii. htt...       1  \n","7611  Police investigating after an e-bike collided ...       1  \n","7612  The Latest: More Homes Razed by Northern Calif...       1  \n","\n","[7613 rows x 5 columns]\n"]}]},{"cell_type":"markdown","metadata":{"id":"A8CPBUal3HvL"},"source":["## Задание 2 (1 балл)\n","Давайте немного посмотрим на наши данные. Визуализируйте (где явно просят) или выведете информацию о следующем:\n","\n","1. Какое распределение классов в обучающей выборке?\n"]},{"cell_type":"code","source":["class_counts = train['target'].value_counts()\n","\n","\n","print(class_counts)"],"metadata":{"id":"WvJ_EU9o5BGm","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1683832149656,"user_tz":-180,"elapsed":11,"user":{"displayName":"Дмитрий Петин","userId":"09445160174042392657"}},"outputId":"7225e45c-7233-4cfe-da55-eb748207042a"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["0    3024\n","1    2305\n","Name: target, dtype: int64\n"]}]},{"cell_type":"markdown","source":["2. Посмотрите на колонку \"keyword\" - возьмите 10 наиболее встречающихся значений, постройте ступенчатую диаграмму распределения классов в зависимости от значения keyword, сделайте выводы."],"metadata":{"id":"f08KScbP5q2y"}},{"cell_type":"code","source":["popular_keywords = train['keyword'].value_counts().head(10)\n","popular_keywords"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2W-AM6AoXYEj","executionInfo":{"status":"ok","timestamp":1683832149656,"user_tz":-180,"elapsed":8,"user":{"displayName":"Дмитрий Петин","userId":"09445160174042392657"}},"outputId":"c30bf3ab-489b-4256-acb2-2d81f765f780"},"execution_count":13,"outputs":[{"output_type":"execute_result","data":{"text/plain":["damage               36\n","siren                35\n","wreckage             34\n","fatalities           33\n","deluge               31\n","twister              30\n","fatality             30\n","harm                 30\n","emergency            30\n","nuclear%20reactor    30\n","Name: keyword, dtype: int64"]},"metadata":{},"execution_count":13}]},{"cell_type":"code","source":["popular_keywords = train['keyword'].value_counts().head(10)\n","\n","\n","positive_data = train[train['target'] == 1]\n","negative_data = train[train['target'] == 0]\n","\n","\n","common_keywords = list(set(popular_keywords.index).intersection(set(negative_data['keyword'].value_counts().index)))\n","\n","\n","plt.figure(figsize=(12, 6))\n","\n","\n","plt.bar(popular_keywords.index, positive_data['keyword'].value_counts().loc[popular_keywords.index],\n","        color='green', alpha=0.5, label='1')\n","\n","\n","plt.bar(common_keywords, negative_data['keyword'].value_counts().loc[common_keywords],\n","        color='red', alpha=0.5, label='0')\n","\n","plt.xlabel('Keyword')\n","plt.ylabel('Count')\n","plt.title('Distribution of Classes by Keyword')\n","plt.xticks(rotation=45)\n","plt.legend()\n","plt.show()\n"],"metadata":{"id":"WSCb0htu5w_Y","colab":{"base_uri":"https://localhost:8080/","height":54},"executionInfo":{"status":"ok","timestamp":1683832150210,"user_tz":-180,"elapsed":560,"user":{"displayName":"Дмитрий Петин","userId":"09445160174042392657"}},"outputId":"7df895c8-1053-43d3-bbe3-adb94199987b"},"execution_count":14,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1200x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["Некоторые ключевые слова более характерны для определенного класса. Например, ключевые слова \"wreckage\", \"debris\", \"derailment\" и \"outbreak\" встречаются чаще в сообщениях с отрицательным классом, в то время как ключевые слова \"storm\", \"fire\", \"flood\" и \"earthquake\" встречаются чаще в сообщениях с положительным классом. Это может указывать на связь между ключевыми словами в тексте и типом катастрофы, о которой сообщается.\n","Некоторые ключевые слова встречаются в обоих классах сравнительно равномерно. Например, ключевые слова \"emergency\" и \"fatalities\" встречаются как в сообщениях с положительным, так и с отрицательным классом. Это может свидетельствовать о том, что эти ключевые слова более общие и не являются определенными индикаторами какого-либо класса.\n","Некоторые ключевые слова могут быть неинформативными для определения класса. Например, ключевое слово \"siren\" встречается примерно равномерно и в сообщениях с положительным, и с отрицательным классом. Это может указывать на то, что это ключевое слово не имеет прямой связи с классификацией сообщений."],"metadata":{"id":"l4al3g9E-P09"}},{"cell_type":"markdown","metadata":{"id":"c006nNBP3HvM"},"source":["## Задание 3 (0.5 балла) \n","\n","В этом задании предлагается объединить все три текстовых столбца в один (просто сконкатенировать cтроки) и убрать столбец с индексом."]},{"cell_type":"code","source":["train.loc[[6590, 7122, 2769]]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":237},"id":"GdF9gFmL-c0r","outputId":"dd718b7b-4955-4641-ec4c-db4ae373347c","executionInfo":{"status":"ok","timestamp":1683832150211,"user_tz":-180,"elapsed":11,"user":{"displayName":"Дмитрий Петин","userId":"09445160174042392657"}}},"execution_count":15,"outputs":[{"output_type":"execute_result","data":{"text/plain":["         id          keyword      location  \\\n","6590   9436        survivors  Marietta, GA   \n","7122  10203  violent%20storm           NaN   \n","2769   3980      devastation  Atlanta g.a.   \n","\n","                                                   text  target  \n","6590  Stemming from my #Cubs talk- the team rosters ...       1  \n","7122  If you were the NWS wth a rotating storm w/ a ...       1  \n","2769  http://t.co/Gxgm1T3W0J From Devastation to Ela...       0  "],"text/html":["\n","  <div id=\"df-c9b6c738-0523-494e-9ac0-848ed86b650f\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>id</th>\n","      <th>keyword</th>\n","      <th>location</th>\n","      <th>text</th>\n","      <th>target</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>6590</th>\n","      <td>9436</td>\n","      <td>survivors</td>\n","      <td>Marietta, GA</td>\n","      <td>Stemming from my #Cubs talk- the team rosters ...</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>7122</th>\n","      <td>10203</td>\n","      <td>violent%20storm</td>\n","      <td>NaN</td>\n","      <td>If you were the NWS wth a rotating storm w/ a ...</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2769</th>\n","      <td>3980</td>\n","      <td>devastation</td>\n","      <td>Atlanta g.a.</td>\n","      <td>http://t.co/Gxgm1T3W0J From Devastation to Ela...</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c9b6c738-0523-494e-9ac0-848ed86b650f')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-c9b6c738-0523-494e-9ac0-848ed86b650f button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-c9b6c738-0523-494e-9ac0-848ed86b650f');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":15}]},{"cell_type":"code","source":["train['combined_text'] = train[['keyword', 'location', 'text']].apply(lambda x: ' '.join(x.dropna().astype(str)), axis=1)\n","\n","\n","#train = train.drop(columns=['id'])\n","\n","\n","train.loc[[6590, 7122, 2769]]\n","train_new = train.copy()\n","test['combined_text'] = test[['keyword', 'location', 'text']].apply(lambda x: ' '.join(x.dropna().astype(str)), axis=1)\n","\n","\n","#test = test.drop(columns=['id'])\n","\n","\n","\n","test_new = train.copy()\n"],"metadata":{"id":"lwwJKX_l-eoh","executionInfo":{"status":"ok","timestamp":1683832151869,"user_tz":-180,"elapsed":1665,"user":{"displayName":"Дмитрий Петин","userId":"09445160174042392657"}}},"execution_count":16,"outputs":[]},{"cell_type":"code","source":["train_new.loc[[6590, 7122, 2769]]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":308},"id":"jk7P70XX_CpT","outputId":"c1f180e1-ff91-4e6e-e206-d5dbd1b0b69e","executionInfo":{"status":"ok","timestamp":1683832151870,"user_tz":-180,"elapsed":10,"user":{"displayName":"Дмитрий Петин","userId":"09445160174042392657"}}},"execution_count":17,"outputs":[{"output_type":"execute_result","data":{"text/plain":["         id          keyword      location  \\\n","6590   9436        survivors  Marietta, GA   \n","7122  10203  violent%20storm           NaN   \n","2769   3980      devastation  Atlanta g.a.   \n","\n","                                                   text  target  \\\n","6590  Stemming from my #Cubs talk- the team rosters ...       1   \n","7122  If you were the NWS wth a rotating storm w/ a ...       1   \n","2769  http://t.co/Gxgm1T3W0J From Devastation to Ela...       0   \n","\n","                                          combined_text  \n","6590  survivors Marietta, GA Stemming from my #Cubs ...  \n","7122  violent%20storm If you were the NWS wth a rota...  \n","2769  devastation Atlanta g.a. http://t.co/Gxgm1T3W0...  "],"text/html":["\n","  <div id=\"df-d24cee8e-3304-4a4b-82fe-fed102333d5b\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>id</th>\n","      <th>keyword</th>\n","      <th>location</th>\n","      <th>text</th>\n","      <th>target</th>\n","      <th>combined_text</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>6590</th>\n","      <td>9436</td>\n","      <td>survivors</td>\n","      <td>Marietta, GA</td>\n","      <td>Stemming from my #Cubs talk- the team rosters ...</td>\n","      <td>1</td>\n","      <td>survivors Marietta, GA Stemming from my #Cubs ...</td>\n","    </tr>\n","    <tr>\n","      <th>7122</th>\n","      <td>10203</td>\n","      <td>violent%20storm</td>\n","      <td>NaN</td>\n","      <td>If you were the NWS wth a rotating storm w/ a ...</td>\n","      <td>1</td>\n","      <td>violent%20storm If you were the NWS wth a rota...</td>\n","    </tr>\n","    <tr>\n","      <th>2769</th>\n","      <td>3980</td>\n","      <td>devastation</td>\n","      <td>Atlanta g.a.</td>\n","      <td>http://t.co/Gxgm1T3W0J From Devastation to Ela...</td>\n","      <td>0</td>\n","      <td>devastation Atlanta g.a. http://t.co/Gxgm1T3W0...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d24cee8e-3304-4a4b-82fe-fed102333d5b')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-d24cee8e-3304-4a4b-82fe-fed102333d5b button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-d24cee8e-3304-4a4b-82fe-fed102333d5b');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":17}]},{"cell_type":"markdown","metadata":{"id":"ViXdGTxP3HvM"},"source":["## Задание 4 (0.5 балла)\n","\n","Далее мы будем пока работать только с train частью.\n","\n","1. Предобработайте данные (train часть) с помощью CountVectorizer.\n","2. Какого размера получилась матрица?\n"]},{"cell_type":"code","source":["from sklearn.feature_extraction.text import CountVectorizer\n","\n","vectorizer = CountVectorizer()\n","\n","# Преобразование текстовых данных в матрицу счетчиков\n","matrix = vectorizer.fit_transform(train['combined_text'])\n","\n","# Получение размера матрицы\n","matrix_size = matrix.shape\n","\n","print(\"Размер матрицы:\", matrix_size)"],"metadata":{"id":"oB1MTqUVAbPA","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1683832152260,"user_tz":-180,"elapsed":397,"user":{"displayName":"Дмитрий Петин","userId":"09445160174042392657"}},"outputId":"684b0dfb-5474-4c8d-b3f4-3e2b9d6b48de"},"execution_count":18,"outputs":[{"output_type":"stream","name":"stdout","text":["Размер матрицы: (5329, 18455)\n"]}]},{"cell_type":"markdown","metadata":{"id":"A4waLlnC3HvM"},"source":["## Задание 5 (1 балл)\n","\n","В предыдущем пункте у вас должна была получиться достаточно большая матрица.\n","Если вы взгляните на текст, то увидете, что там есть множество специальных символов, ссылок и прочего мусора.\n","\n","Давайте также посмотрим на словарь, который получился в результате построения CountVectorizer, его можно найти в поле vocabulary_ инстанса этого класса. Давайте напишем функцию, которая печает ответы на следующие вопросы:\n","\n","1. Найдите в этом словаре все слова, которые содержат цифры. Сколько таких слов нашлось?\n","\n","2. Найдите все слова, которые содержат символы пунктуации. Сколько таких слов нашлось? \n","\n","3. Сколько хэштегов (токен начинается на #) и упоминаний (токен начинается на @) осталось в словаре?"]},{"cell_type":"code","source":["def contains_digit(s: str) -> bool:\n","    # Проверка, содержит ли слово цифры\n","    return any(char.isdigit() for char in s)\n","\n","def contains_punctuation(s: str) -> bool:\n","    # Проверка, содержит ли слово пунктуацию\n","    return any(char in punctuation for char in s)\n","\n","def is_hashtag(s: str) -> bool:\n","    # Проверка, является ли слово хэштегом\n","    return s.startswith(\"#\")\n","\n","def is_mention(s: str) -> bool:\n","    # Проверка, является ли слово упоминанием\n","    return s.startswith(\"@\")\n","\n","def investigate_vocabulary(vocabulary):\n","    words_with_digit = sum(contains_digit(word) for word in vocabulary)\n","    words_with_punctuation = sum(contains_punctuation(word) for word in vocabulary)\n","    hashtags = sum(is_hashtag(word) for word in vocabulary)\n","    mentions = sum(is_mention(word) for word in vocabulary)\n","\n","    print('With digit:      ', words_with_digit)\n","    print('With punctuation:', words_with_punctuation)\n","    print('Hashtags:        ', hashtags)\n","    print('Mentions:        ', mentions)\n","\n","\n"],"metadata":{"id":"7PhQSWqcHhU8","executionInfo":{"status":"ok","timestamp":1683832152260,"user_tz":-180,"elapsed":7,"user":{"displayName":"Дмитрий Петин","userId":"09445160174042392657"}}},"execution_count":19,"outputs":[]},{"cell_type":"code","source":["dummy_vocab = {'th1nk' : 0,\n","               'think333' : 1,\n","               'think.' : 2,\n","               'th!nk' : 3,\n","               'th...nk' : 4,\n","               '#think' : 5,\n","               '@think' : 6,\n","               '@thinking':7,\n","               '@nothink' : 8,\n","               'think' : 9}\n","investigate_vocabulary(dummy_vocab)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"s8hL5ZcQIdp6","outputId":"521cac50-ecb5-4d09-e1f2-b4637c6201fd","executionInfo":{"status":"ok","timestamp":1683832152261,"user_tz":-180,"elapsed":7,"user":{"displayName":"Дмитрий Петин","userId":"09445160174042392657"}}},"execution_count":20,"outputs":[{"output_type":"stream","name":"stdout","text":["With digit:       2\n","With punctuation: 7\n","Hashtags:         1\n","Mentions:         3\n"]}]},{"cell_type":"code","source":["investigate_vocabulary(vectorizer.vocabulary_)"],"metadata":{"id":"VpW8R_SuKR_l","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1683832152262,"user_tz":-180,"elapsed":7,"user":{"displayName":"Дмитрий Петин","userId":"09445160174042392657"}},"outputId":"8cc1186e-8e85-473c-b42c-be49bd8ce124"},"execution_count":21,"outputs":[{"output_type":"stream","name":"stdout","text":["With digit:       3812\n","With punctuation: 315\n","Hashtags:         0\n","Mentions:         0\n"]}]},{"cell_type":"markdown","metadata":{"id":"bfNLaxX93HvM"},"source":["## Задание 6 (0.5 балла)\n","\n","Вспомним, что на семинаре по текстам мы узнали, что в nltk есть специальный токенизатор для текстов - TweetTokenizer. Попробуем применить CountVectorizer с этим токенизатором. Ответьте на все вопросы из предыдущего пункта для TweetTokenizer и сравните результаты."]},{"cell_type":"code","execution_count":22,"metadata":{"id":"xnlRoXUS3HvM","executionInfo":{"status":"ok","timestamp":1683832153413,"user_tz":-180,"elapsed":1156,"user":{"displayName":"Дмитрий Петин","userId":"09445160174042392657"}}},"outputs":[],"source":["from nltk.tokenize import TweetTokenizer\n","# Чтобы узнать, какие параметры есть у этого токенайзера - используйте help(TweetTokenizer)\n","# Для того, чтобы передать токенайзер в CountVectorizer используйте параметр tokenizer"]},{"cell_type":"code","source":["tweet_tokenizer = TweetTokenizer()\n","\n","vectorizer_tweet = CountVectorizer(tokenizer=tweet_tokenizer.tokenize)\n","X_tweet = vectorizer_tweet.fit_transform(train['combined_text'])\n","\n","print(\"Размер матрицы:\", X_tweet.shape)\n","\n"],"metadata":{"id":"8lPMIf6UKccT","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1683832154127,"user_tz":-180,"elapsed":718,"user":{"displayName":"Дмитрий Петин","userId":"09445160174042392657"}},"outputId":"9d139034-3bae-416e-a6c0-31c9d6948632"},"execution_count":23,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/feature_extraction/text.py:528: UserWarning: The parameter 'token_pattern' will not be used since 'tokenizer' is not None'\n","  warnings.warn(\n"]},{"output_type":"stream","name":"stdout","text":["Размер матрицы: (5329, 19670)\n"]}]},{"cell_type":"code","source":["investigate_vocabulary(vectorizer_tweet.vocabulary_)"],"metadata":{"id":"7oR5kNKVLLpm","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1683832154127,"user_tz":-180,"elapsed":6,"user":{"displayName":"Дмитрий Петин","userId":"09445160174042392657"}},"outputId":"c116a6ea-69a1-403f-a89d-42edf95777ec"},"execution_count":24,"outputs":[{"output_type":"stream","name":"stdout","text":["With digit:       3939\n","With punctuation: 7338\n","Hashtags:         1470\n","Mentions:         1679\n"]}]},{"cell_type":"markdown","source":["**Сравнение:** Обе функции выполняют анализ словаря, полученного с помощью CountVectorizer и HashingVectorizer, но существуют различия в их эффективности.\n","\n","Функция analyze_countvectorizer_vocabulary более эффективна, так как она использует словарь, предоставленный самим CountVectorizer, который является объектом sparse-матрицы. Это означает, что словарь содержит только уникальные токены, которые фактически появились в тексте. Следовательно, функция analyze_countvectorizer_vocabulary работает непосредственно с этим словарем, который уже является отфильтрованным и содержит только релевантные токены. Это позволяет эффективно выполнять проверки на наличие цифр, символов пунктуации, хэштегов и упоминаний.\n","\n","С другой стороны, функция analyze_hashingvectorizer_vocabulary работает с обычным словарем, который был создан с помощью HashingVectorizer. Этот словарь не является отфильтрованным и содержит все токены, включая возможные дубликаты. Поскольку HashingVectorizer использует хэширование для преобразования токенов в индексы, он не предоставляет прямого доступа к оригинальным токенам, и поэтому невозможно точно определить, какие слова содержат цифры, символы пунктуации, хэштеги или упоминания. Функция analyze_hashingvectorizer_vocabulary выполняет итерацию по всему словарю и выполняет проверки на наличие цифр, символов пунктуации, хэштегов и упоминаний для каждого токена, что может быть более ресурсоемкой операцией.\n","\n","Таким образом, с точки зрения эффективности и скорости выполнения, функция analyze_countvectorizer_vocabulary является более эффективной, особенно при больших объемах данных, так как она работает непосредственно с отфильтрованным словарем, предоставленным CountVectorizer. Однако, если точность анализа токенов является более важным фактором, то функция analyze_hashingvectorizer_vocabulary может быть полезной, хотя она может потребовать больше времени для выполнения."],"metadata":{"id":"Wetr80-ILULV"}},{"cell_type":"markdown","metadata":{"id":"6_k_-i1x3HvM"},"source":["## Задание 7 (2 балла)\n","\n","В scikit-learn мы можем оценивать процесс подсчета матрицы через CountVectorizer. У CountVectorizer, как и у других наследников \\_VectorizerMixin, есть аргумент tokenizer и preprocessor. preprocessor применится в самом начале к каждой строке вашего датасета, tokenizer же должен принять строку и вернуть токены.\n","Давайте напишем кастомный токенайзер, которые сделает все, что нам нужно: \n","\n","0. Приведет все буквы к нижнему регистру\n","1. Разобьет текст на токены с помощью TweetTokenizer из пакета nltk\n","2. Удалит все токены содержащие не латинские буквы, кроме смайликов (будем считать ими токены содержащие только пунктуацию и, как минимум, одну скобочку) и хэштегов, которые после начальной # содержат только латинские буквы.\n","3. Удалит все токены, которые перечислены в nltk.corpus.stopwords.words('english')\n","4. Проведет стемминг с помощью SnowballStemmer\n","\n"]},{"cell_type":"code","source":["import re\n","import nltk\n","from nltk.tokenize import TweetTokenizer\n","from nltk.stem import SnowballStemmer\n","from nltk.corpus import stopwords\n","nltk.download('stopwords')\n","stemmer = SnowballStemmer(\"english\")\n","stop_words = set(stopwords.words(\"english\"))\n","tweet_tokenizer = TweetTokenizer()\n","\n","def contains_only_latin_letters(s: str) -> bool:\n","    # Проверка, содержит ли слово только латинские буквы\n","    return bool(re.match(r\"^[a-zA-Z]+$\", s))\n","\n","def is_emoji(s: str) -> bool:\n","    # Проверка, является ли слово смайликом\n","    return bool(re.match(r\"^[:;=8][\\-o\\*\\']?[\\)dDpP\\]\\}]+|[\\(\\[\\{]+[o\\*\\']?[:;=8]|<3$\", s))\n","\n","def is_hashtag(s: str) -> bool:\n","    # Проверка, является ли слово хэштегом\n","    return bool(re.match(r\"^#[a-zA-Z]+$\", s))\n","\n","def custom_tokenizer(s: str) -> List[str]:    \n","    # Кастомный токенайзер\n","    tokens = tweet_tokenizer.tokenize(s.lower())\n","    tokens = [token for token in tokens if contains_only_latin_letters(token) or is_emoji(token) or is_hashtag(token)]\n","    tokens = [token for token in tokens if token not in stop_words]\n","    tokens = [stemmer.stem(token) for token in tokens]\n","    return tokens\n","\n","  "],"metadata":{"id":"qhwmi7DEMD25","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1683832154958,"user_tz":-180,"elapsed":834,"user":{"displayName":"Дмитрий Петин","userId":"09445160174042392657"}},"outputId":"d86914f8-4247-4044-92eb-c122f0ba0f2e"},"execution_count":25,"outputs":[{"output_type":"stream","name":"stderr","text":["[nltk_data] Downloading package stopwords to /root/nltk_data...\n","[nltk_data]   Unzipping corpora/stopwords.zip.\n"]}]},{"cell_type":"code","source":["custom_tokenizer('She LOVES painting :-) #art')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vYzPZzf8O6vj","outputId":"c1dbc31c-b516-48fb-b6cb-37c3111cd94f","executionInfo":{"status":"ok","timestamp":1683832154959,"user_tz":-180,"elapsed":9,"user":{"displayName":"Дмитрий Петин","userId":"09445160174042392657"}}},"execution_count":26,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['love', 'paint', ':-)', '#art']"]},"metadata":{},"execution_count":26}]},{"cell_type":"markdown","source":["Продемонстрируйте работу вашей функции на первых десяти текстах в обучающей выборке."],"metadata":{"id":"2S_-ThAf5It4"}},{"cell_type":"code","source":["train_sample = train['text'].head(10)\n","for text in train_sample:\n","    tokens = custom_tokenizer(text)\n","    print(tokens)"],"metadata":{"id":"A1fh3_itPz7D","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1683832154959,"user_tz":-180,"elapsed":8,"user":{"displayName":"Дмитрий Петин","userId":"09445160174042392657"}},"outputId":"824d0781-e9c7-4dd1-a28c-a1d556dd1884"},"execution_count":27,"outputs":[{"output_type":"stream","name":"stdout","text":["['ash', 'australia', 'collaps', 'trent', 'bridg', 'among', 'worst', 'histori', 'england', 'bundl', 'australia']\n","['great', 'michigan', 'techniqu', 'camp', 'thank', '#goblu', '#wrestleon']\n","['cnn', 'tennesse', 'movi', 'theater', 'shoot', 'suspect', 'kill', 'polic']\n","['still', 'riot', 'coupl', 'hour', 'left', 'class']\n","['crack', 'path', 'wipe', 'morn', 'beach', 'run', 'surfac', 'wound', 'left', 'elbow', 'right', 'knee']\n","['expert', 'franc', 'begin', 'examin', 'airplan', 'debri', 'found', 'reunion', 'island', 'french', 'air', 'accid', 'expert', '#mlb']\n","['came', 'kill', 'indian', 'fun', 'video', 'smirk', 'remorseless', 'pakistani', 'killer', 'show', 'boast']\n","['except', 'idk', 'realli', 'burn']\n","['destroy', 'hous']\n","['polic', 'offic', 'wound', 'suspect', 'dead', 'exchang', 'shot']\n"]}]},{"cell_type":"markdown","metadata":{"id":"a5lNZ4tb3HvN"},"source":["## Задание 8 (1 балл)\n","\n","1. Примените CountVectorizer с реализованным выше токенизатором к обучающим и тестовым выборкам.\n"]},{"cell_type":"code","source":["vectorizer = CountVectorizer(tokenizer=custom_tokenizer)\n","X_train = vectorizer.fit_transform(train['text'])\n","X_test = vectorizer.transform(test['text'])\n"],"metadata":{"id":"LDqixz7QQEbn","executionInfo":{"status":"ok","timestamp":1683832156902,"user_tz":-180,"elapsed":1949,"user":{"displayName":"Дмитрий Петин","userId":"09445160174042392657"}}},"execution_count":28,"outputs":[]},{"cell_type":"markdown","source":["2. Обучите LogisticRegression на полученных признаках.\n"],"metadata":{"id":"YcetwuEi5ds9"}},{"cell_type":"code","source":["from sklearn.linear_model import LogisticRegression\n","model = LogisticRegression()\n","model.fit(X_train, train['target'])\n","predictions = model.predict(X_test)\n"],"metadata":{"id":"BVj03QV2QbWl","executionInfo":{"status":"ok","timestamp":1683832156903,"user_tz":-180,"elapsed":9,"user":{"displayName":"Дмитрий Петин","userId":"09445160174042392657"}}},"execution_count":29,"outputs":[]},{"cell_type":"markdown","source":["3. Посчитайте метрику f1-score на тестовых данных."],"metadata":{"id":"6Ch6uz2P5e-T"}},{"cell_type":"code","source":["from sklearn.metrics import f1_score\n","\n","f1 = f1_score(test['target'], predictions)\n","print(\"F1 score:\",f1)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"osyC0pdT3cSD","outputId":"38a527d6-591e-4897-ab70-8318a9a881a3","executionInfo":{"status":"ok","timestamp":1683832156904,"user_tz":-180,"elapsed":9,"user":{"displayName":"Дмитрий Петин","userId":"09445160174042392657"}}},"execution_count":30,"outputs":[{"output_type":"stream","name":"stdout","text":["F1 score: 0.7526055951727921\n"]}]},{"cell_type":"markdown","metadata":{"id":"aFIEYOMZ3HvN"},"source":["## Задание 9 (1 балл)\n","\n","1. Повторите 8 задание, но с tf-idf векторизатором. Как изменилось качество?\n"]},{"cell_type":"code","source":["from sklearn.feature_extraction.text import TfidfVectorizer\n","\n","tfidf_vectorizer = TfidfVectorizer(tokenizer=custom_tokenizer)\n","train_tfidf = tfidf_vectorizer.fit_transform(train['combined_text'])\n","test_tfidf = tfidf_vectorizer.transform(test['combined_text'])\n","logreg = LogisticRegression()\n","logreg.fit(train_tfidf, train['target'])\n","predictions = logreg.predict(test_tfidf)\n","f1 = f1_score(test['target'], predictions)\n","\n","\n","print(\"F1 score:\",f1)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cDqs61hl3ve3","outputId":"7e350dc0-d5fe-4f75-c87f-8203e15e32e5","executionInfo":{"status":"ok","timestamp":1683832159706,"user_tz":-180,"elapsed":2810,"user":{"displayName":"Дмитрий Петин","userId":"09445160174042392657"}}},"execution_count":31,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/feature_extraction/text.py:528: UserWarning: The parameter 'token_pattern' will not be used since 'tokenizer' is not None'\n","  warnings.warn(\n"]},{"output_type":"stream","name":"stdout","text":["F1 score: 0.7444444444444446\n"]}]},{"cell_type":"markdown","source":["1. **Ответ:** CountVectorizer:\n","Если важна частота встречаемости слов в тексте, например, для анализа тематического профиля текста или определения наиболее популярных слов, то CountVectorizer может быть предпочтительным выбором.\n","Подходит для задач, где важно учитывать наличие слов в тексте, но не учитывать их частоту или вес.\n","TF-IDF векторизация:\n","Если важна важность слова в тексте, основанная на его частоте в документе и обратной частоте встречаемости в корпусе текстов, например, для классификации текстов или рекомендательных систем, то TF-IDF векторизация может быть более подходящей.\n","Подходит для задач, где важно учитывать и встречаемость слов в тексте, и их общую важность в корпусе текстов.\n","Оба метода имеют свои преимущества и ограничения, и выбор зависит от конкретной задачи, размера и особенностей данных. Рекомендуется экспериментировать с обоими методами и выбирать тот, который демонстрирует лучшую производительность на конкретной задаче\n"],"metadata":{"id":"SXaNclTZSFjO"}},{"cell_type":"markdown","source":["2. Мы можем еще сильнее уменьшить размер нашей матрицы, если отбросим значения df близкие к единице. Скорее всего такие слова не несут много информации о категории, так как встречаются достаточно часто. Ограничьте максимальный df в параметрах TfIdfVectorizer, поставьте верхнюю границу равную 0.9. Как изменился размер матрицы, как изменилось качество?\n"],"metadata":{"id":"CPtk0lCA5POY"}},{"cell_type":"code","source":["tfidf_vectorizer = TfidfVectorizer(tokenizer=custom_tokenizer, max_df=0.9)\n","train_tfidf = tfidf_vectorizer.fit_transform(train['combined_text'])\n","test_tfidf = tfidf_vectorizer.transform(test['combined_text'])\n","\n","\n","print(\"Matrix size after limiting max_df:\", train_tfidf.shape)\n","\n","\n","logreg = LogisticRegression()\n","logreg.fit(train_tfidf, train['target'])\n","\n","\n","predictions = logreg.predict(test_tfidf)\n","\n","\n","f1 = f1_score(test['target'], predictions)\n","print(\"F1 score after limiting max_df:\", f1)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"EU-MRXyRSHLm","outputId":"ef9f6cc9-87b3-4bf9-ed9c-99405eb9accd","executionInfo":{"status":"ok","timestamp":1683832161813,"user_tz":-180,"elapsed":2118,"user":{"displayName":"Дмитрий Петин","userId":"09445160174042392657"}}},"execution_count":32,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/feature_extraction/text.py:528: UserWarning: The parameter 'token_pattern' will not be used since 'tokenizer' is not None'\n","  warnings.warn(\n"]},{"output_type":"stream","name":"stdout","text":["Matrix size after limiting max_df: (5329, 10483)\n","F1 score after limiting max_df: 0.7444444444444446\n"]}]},{"cell_type":"code","source":["# -- YOUR CODE HERE --"],"metadata":{"id":"z1TkO9HeSTJ9","executionInfo":{"status":"ok","timestamp":1683832161814,"user_tz":-180,"elapsed":5,"user":{"displayName":"Дмитрий Петин","userId":"09445160174042392657"}}},"execution_count":33,"outputs":[]},{"cell_type":"markdown","source":["2. **Ответ:** При ограничении максимального значения df до 0.9 размер матрицы уменьшился по сравнению с предыдущим подходом, так как были исключены слова, которые встречаются очень часто и не несут значительной информации о категориях. Качество модели может как улучшиться, так и ухудшиться в зависимости от данных и задачи. В нашем случае оно не изминилось "],"metadata":{"id":"4Two_O3rSVmh"}},{"cell_type":"markdown","source":["3. Также мы можем уменьшить размер матрицы, удаляя слова со слишком маленьким df. Удалось ли добиться улучшения качества? "],"metadata":{"id":"VhyjbI5X5QnG"}},{"cell_type":"code","source":["min_df_threshold = 0.02\n","\n","tfidf_vectorizer = TfidfVectorizer(tokenizer=custom_tokenizer, max_df=0.9, min_df=min_df_threshold)\n","\n","train_tfidf = tfidf_vectorizer.fit_transform(train['combined_text'])\n","\n","test_tfidf = tfidf_vectorizer.transform(test['combined_text'])\n","\n","logreg = LogisticRegression()\n","logreg.fit(train_tfidf, train['target'])\n","\n","predictions = logreg.predict(test_tfidf)\n","\n","f1 = f1_score(test['target'], predictions)\n","\n","print(\"F1 score:\", f1)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9mNpIxv6SfKc","outputId":"35ee9e1f-4f54-44b7-f284-ae99d0f824ac","executionInfo":{"status":"ok","timestamp":1683832164443,"user_tz":-180,"elapsed":2633,"user":{"displayName":"Дмитрий Петин","userId":"09445160174042392657"}}},"execution_count":34,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/feature_extraction/text.py:528: UserWarning: The parameter 'token_pattern' will not be used since 'tokenizer' is not None'\n","  warnings.warn(\n"]},{"output_type":"stream","name":"stdout","text":["F1 score: 0.4065281899109792\n"]}]},{"cell_type":"markdown","source":["3. **Ответ:** По результатам F1-меры, которая составляет 0.4065, можно сделать вывод, что удаление слов с низким значением df не привело к улучшению качества модели. Однако, стоит отметить, что удаление слов с низким df может привести к сокращению размерности матрицы и ускорению вычислений, что может быть полезным в случае больших объемов данных."],"metadata":{"id":"imeD8skxSqdg"}},{"cell_type":"markdown","metadata":{"id":"1l1sx4nB3HvN"},"source":["## Задание 10 (1 балл)\n","\n","Еще один популяпный трюк, который позволит уменьшить количество признаков называется hashing trick. Его суть в том, то мы случайно группируем признаки ииии  ..... складываем их! А потом удаляем исходные признаки. В итоге все наши признаки это просто суммы исходных. Звучит странно, но это отлично работает. Давайте проверим этот трюк в нашем сеттинге.\n","Также при таком подходе вам не нужно хранить словарь token->index, что тоже иногда полезно.\n","\n","1. Повторите задание 8 с HashingVectorizer, укажите количество фичей равное 5000.\n"]},{"cell_type":"code","source":["from sklearn.feature_extraction.text import HashingVectorizer\n","\n","\n","hash_vectorizer = HashingVectorizer(tokenizer=custom_tokenizer, n_features=5000)\n","train_hash = hash_vectorizer.transform(train['combined_text'])\n","test_hash = hash_vectorizer.transform(test['combined_text'])\n","\n","logreg = LogisticRegression()\n","logreg.fit(train_hash, train['target'])\n","predictions = logreg.predict(test_hash)\n","f1 = f1_score(test['target'], predictions)\n","\n","print('F1 score: ',f1)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8qSoW894RXxz","outputId":"cd241ad8-af26-4fc3-8857-49f6085ac94a","executionInfo":{"status":"ok","timestamp":1683832170057,"user_tz":-180,"elapsed":5617,"user":{"displayName":"Дмитрий Петин","userId":"09445160174042392657"}}},"execution_count":35,"outputs":[{"output_type":"stream","name":"stdout","text":["F1 score:  0.7205800334634691\n"]}]},{"cell_type":"markdown","source":["2. Какой из подходов показал самый высокий результат?"],"metadata":{"id":"1C3I4ceg6AG-"}},{"cell_type":"markdown","source":["2. **Ответ:** \n","CountVectorizer со стандартными настройками.\n","CountVectorizer с кастомным токенизатором.\n","TfidfVectorizer со стандартными настройками.\n","TfidfVectorizer с кастомным токенизатором.\n","TfidfVectorizer с ограничением максимального df.\n","TfidfVectorizer с удалением слов с малым df."],"metadata":{"id":"_bIfyVlOS9Lu"}},{"cell_type":"markdown","metadata":{"id":"zylJ6l0R3HvN"},"source":["## Задание 11 (1 балл)\n","\n","В этом задании нужно добиться f1 меры хотя в 0.75 на тестовых данных."]},{"cell_type":"code","source":["vectorizer = CountVectorizer()\n","\n","\n","train_features = vectorizer.fit_transform(train['combined_text'])\n","test_features = vectorizer.transform(test['combined_text'])\n","\n","logreg = LogisticRegression()\n","logreg.fit(train_features, train['target'])\n","\n","predictions = logreg.predict(test_features)\n","\n","f1 = f1_score(test['target'], predictions)\n","\n","print(\"F1-score:\", f1)"],"metadata":{"id":"GSTVApFeS-OY","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1683832171663,"user_tz":-180,"elapsed":1609,"user":{"displayName":"Дмитрий Петин","userId":"09445160174042392657"}},"outputId":"1ca3c57f-2d29-4ac0-afc9-a5279f735c9d"},"execution_count":36,"outputs":[{"output_type":"stream","name":"stdout","text":["F1-score: 0.7533729087965461\n"]}]}],"metadata":{"kernelspec":{"display_name":"Python 3 (ipykernel)","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.5"},"colab":{"provenance":[{"file_id":"https://github.com/hse-ds/iad-intro-ds/blob/master/2023/homeworks/hw06_texts.ipynb","timestamp":1683378932118}],"collapsed_sections":["YlLemInT3HvL","A8CPBUal3HvL"]}},"nbformat":4,"nbformat_minor":0}